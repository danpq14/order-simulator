services:
  # Zookeeper - Required for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: order-simulator-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - order-simulator-network

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: order-simulator-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - order-simulator-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5

  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: order-simulator-mysql
    restart: always
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: order_simulator
      MYSQL_USER: order_user
      MYSQL_PASSWORD: order_password
      # Ensure initialization scripts run
      MYSQL_INITDB_SKIP_TZINFO: 1
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init-database.sql:/docker-entrypoint-initdb.d/01-init-database.sql:ro
    networks:
      - order-simulator-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # ETL Service
  etl-service:
    build:
      context: .
      dockerfile: ./etl/Dockerfile
    container_name: order-simulator-etl
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/order_simulator
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: root
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    networks:
      - order-simulator-network
    restart: unless-stopped
    volumes:
      - gradle_cache:/home/gradle/.gradle

  # Handler Service
  handler-service:
    build:
      context: .
      dockerfile: ./handler/Dockerfile
    container_name: order-simulator-handler
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/order_simulator
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: root
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    networks:
      - order-simulator-network
    restart: unless-stopped
    volumes:
      - gradle_cache:/home/gradle/.gradle

  # Kafka UI (Optional - for monitoring Kafka)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: order-simulator-kafka-ui
    depends_on:
      - kafka
    ports:
      - "8081:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - order-simulator-network

volumes:
  mysql_data:
    driver: local
  gradle_cache:
    driver: local

networks:
  order-simulator-network:
    driver: bridge
